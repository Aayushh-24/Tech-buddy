// This is your Prisma schema file for TechBuddy
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums for Type Safety ---
// Enums ensure that only these specific values can be used for certain fields,
// which prevents bugs from typos and makes the code easier to understand.

enum DocumentStatus {
  processing
  ready
  error
}

enum MessageRole {
  user
  assistant
}

enum GeneratedDocType {
  api_reference
  tutorial
  guide
  readme
}

enum GeneratedDocTone {
  professional
  casual
  technical
  beginner_friendly
}

enum GeneratedDocAudience {
  developers
  managers
  end_users
  stakeholders
}

enum UsageLogAction {
  document_upload
  question_asked
  tokens_used
}


// --- Models ---

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  avatar            String?
  // 🚨 SECURITY WARNING: Storing keys in plain text is a risk.
  // You should encrypt these values in your application code before saving them.
  openRouterApiKey  String?
  githubToken       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  documentsUploaded Int       @default(0)
  questionsAsked    Int       @default(0)
  tokensUsed        Int       @default(0)
  lastActiveAt      DateTime?
  subscriptionType  String    @default("free")
  subscriptionEnds  DateTime?

  documents       Document[]
  repositories    Repository[]
  generatedDocs   GeneratedDocument[]
  conversations   Conversation[]
  usageLogs       UsageLog[]

  @@map("users")
}

model Document {
  id           String         @id @default(cuid())
  filename     String
  originalName String
  fileType     String
  fileSize     Int
  filePath     String
  status       DocumentStatus @default(processing) // <-- Changed to Enum
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks        DocumentChunk[]
  conversations Conversation[]

  @@map("documents")
}

model DocumentChunk {
  id         String @id @default(cuid())
  documentId String
  content    String
  // ⚡️ PERFORMANCE NOTE: Storing embeddings as a String is slow for searches.
  // For a production app, you should use the `pgvector` extension and a `vector` type.
  embedding  String
  chunkIndex Int
  metadata   Json?  // <-- Changed to native JSON type
  createdAt  DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

model Repository {
  id          String   @id @default(cuid())
  name        String
  owner       String
  description String?
  language    String?
  stars       Int?
  forks       Int?
  lastUpdated DateTime?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  files RepositoryFile[]

  @@map("repositories")
}

model RepositoryFile {
  id           String     @id @default(cuid())
  repositoryId String
  path         String
  filename     String
  content      String?
  language     String?
  size         Int?
  createdAt    DateTime   @default(now())

  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("repository_files")
}

model GeneratedDocument {
  id          String             @id @default(cuid())
  title       String
  content     String
  docType     GeneratedDocType   // <-- Changed to Enum
  tone        GeneratedDocTone   // <-- Changed to Enum
  audience    GeneratedDocAudience // <-- Changed to Enum
  codeContext Json?              // <-- Changed to native JSON type
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_documents")
}

model Conversation {
  id         String     @id @default(cuid())
  documentId String?
  userId     String
  title      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole  // <-- Changed to Enum
  content        String
  metadata       Json?        // <-- Changed to native JSON type
  createdAt      DateTime     @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UsageLog {
  id        String         @id @default(cuid())
  userId    String
  action    UsageLogAction // <-- Changed to Enum
  quantity  Int            @default(1)
  metadata  Json?          // <-- Changed to native JSON type
  createdAt DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
}