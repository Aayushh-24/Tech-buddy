// This is your Prisma schema file for TechBuddy
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  avatar          String?
  openRouterApiKey String?
  githubToken     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Usage tracking fields
  documentsUploaded Int      @default(0)
  questionsAsked    Int      @default(0)
  tokensUsed        Int      @default(0)
  lastActiveAt      DateTime?
  subscriptionType  String   @default("free") // "free" or "premium"
  subscriptionEnds  DateTime?

  // Relations
  documents       Document[]
  repositories    Repository[]
  generatedDocs   GeneratedDocument[]
  conversations   Conversation[]
  usageLogs       UsageLog[]
  
  @@map("users")
}

model Document {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  fileType    String   // "pdf" or "docx"
  fileSize    Int
  filePath    String
  status      String   @default("processing") // "processing", "ready", "error"
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks      DocumentChunk[]
  conversations Conversation[]
  
  @@map("documents")
}

model DocumentChunk {
  id          String   @id @default(cuid())
  documentId  String
  content     String
  embedding   String   // Store as JSON string
  chunkIndex  Int
  metadata    String?  // Store as JSON string
  createdAt   DateTime @default(now())

  // Relations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("document_chunks")
}

model Repository {
  id          String   @id @default(cuid())
  name        String
  owner       String
  description String?
  language    String?
  stars       Int?
  forks       Int?
  lastUpdated DateTime?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       RepositoryFile[]
  
  @@map("repositories")
}

model RepositoryFile {
  id           String   @id @default(cuid())
  repositoryId String
  path         String
  filename     String
  content      String?
  language     String?
  size         Int?
  createdAt    DateTime @default(now())

  // Relations
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("repository_files")
}

model GeneratedDocument {
  id          String   @id @default(cuid())
  title       String
  content     String
  docType     String   // "api-reference", "tutorial", "guide", "readme"
  tone        String   // "professional", "casual", "technical", "beginner-friendly"
  audience    String   // "developers", "managers", "end-users", "stakeholders"
  codeContext String?  // JSON string with code context
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("generated_documents")
}

model Conversation {
  id          String   @id @default(cuid())
  documentId  String?
  userId      String
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document    Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  messages    Message[]
  
  @@map("conversations")
}

model Message {
  id            String   @id @default(cuid())
  conversationId String
  role          String   // "user" or "assistant"
  content       String
  metadata      String?  // Store as JSON string
  createdAt     DateTime @default(now())

  // Relations
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model UsageLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // "document_upload", "question_asked", "tokens_used"
  quantity    Int      @default(1)
  metadata    String?  // JSON string with additional context
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usage_logs")
}